// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(FieldMSContext))]
    partial class FieldMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Availability", b =>
                {
                    b.Property<int>("AvailabilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityID"));

                    b.Property<TimeSpan>("CloseHour")
                        .HasColumnType("time");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FieldID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("OpenHour")
                        .HasColumnType("time");

                    b.HasKey("AvailabilityID");

                    b.HasIndex("FieldID");

                    b.ToTable("Availability", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Field", b =>
                {
                    b.Property<Guid>("FieldID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FieldTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("FieldID");

                    b.HasIndex("FieldTypeID");

                    b.ToTable("Field", (string)null);

                    b.HasData(
                        new
                        {
                            FieldID = new Guid("a98ed5b8-d793-4421-9add-cb28723c5f9e"),
                            FieldTypeID = 1,
                            IsActive = false,
                            Name = "Campo 1",
                            Size = "5"
                        },
                        new
                        {
                            FieldID = new Guid("b3bc9c00-c6ef-4b22-8654-3c54622a1f1b"),
                            FieldTypeID = 2,
                            IsActive = false,
                            Name = "Campo 2",
                            Size = "7"
                        },
                        new
                        {
                            FieldID = new Guid("b6424eed-203a-4988-8ce5-f62691426c3e"),
                            FieldTypeID = 1,
                            IsActive = false,
                            Name = "Campo 3",
                            Size = "11"
                        });
                });

            modelBuilder.Entity("Domain.Entities.FieldType", b =>
                {
                    b.Property<int>("FieldTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldTypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FieldTypeID");

                    b.ToTable("FieldType", (string)null);

                    b.HasData(
                        new
                        {
                            FieldTypeID = 1,
                            Description = "pasto"
                        },
                        new
                        {
                            FieldTypeID = 2,
                            Description = "sintetico"
                        },
                        new
                        {
                            FieldTypeID = 3,
                            Description = "Cemento"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Availability", b =>
                {
                    b.HasOne("Domain.Entities.Field", "FieldNavigator")
                        .WithMany("Availabilities")
                        .HasForeignKey("FieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldNavigator");
                });

            modelBuilder.Entity("Domain.Entities.Field", b =>
                {
                    b.HasOne("Domain.Entities.FieldType", "FieldTypeNavigator")
                        .WithMany("Fields")
                        .HasForeignKey("FieldTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldTypeNavigator");
                });

            modelBuilder.Entity("Domain.Entities.Field", b =>
                {
                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("Domain.Entities.FieldType", b =>
                {
                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
